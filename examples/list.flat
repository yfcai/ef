. PRELUDE

const : ∀ β γ. β -> γ -> β
const = Λ. λx : β. λy : γ. x

flip : ∀α β γ. (α → β → γ) → (β → α → γ)
flip = Λ. λf : α → β → γ. λy : β. λx : α. f x y

id : ∀ι. ι → ι
id = Λ. λx : ι. x

compose : ∀α β γ. (β → γ) → (α → β) → (α → γ)
compose = Λ. λg : β → γ. λf : α → β. λx : α. g (f x)

. CONJUNCTION

type Pair α β = ∀γ. (α → β → γ) → γ

pair : ∀α β. α → β → Pair α β
pair = Λ. λx : α. λy : β. Λ. λf : α → β → γ. f x y

proj₁ : ∀α β. Pair α β → α
proj₁ = Λ. λp : Pair α β. p const

proj₂ : ∀α β. Pair α β → β
proj₂ = Λ. λp : Pair α β. p (flip const)


. DISJUNCTION

type Either α β = ∀γ. (α → γ) → (β → γ) → γ

inj₁ : ∀α β. α → Either α β
inj₁ = Λ. λx : α. Λ. λf : α → γ. λg : β → γ. f x

inj₂ : ∀α β. β → Either α β
inj₂ = Λ. λy : β. Λ. λf : α → γ. λg : β → γ. g y

. a disjunction is its own elimination form


. LIST

type List α = ∀β. β → (α → β → β) → β

. List is desugared to (∀α. List α)
nil : ∀α. List α
nil = const

cons : ∀α. α → List α → List α
cons = Λ. λx : α. λxs : List α. Λ. λz : β. λf : α → β → β. (f x (xs z f))

. BӦHM-BERADUCCI ENCODING FOR PATTERN MATCHING ON LISTS

type MatchList η = ∀ξ. ξ → (η → List η → ξ) → ξ

matchList : ∀α. List α → MatchList α
matchList = Λ. λxs : List α.
  xs const
     (λx : α. λys : MatchList α. Λ. λz : ξ. λf : α → List α → ξ. f x (ys nil cons))

. Even without annotations,
. the following bodies are ill-typed:
.   xs nil cons
.   xs nil f
map : ∀α β. (α → β) → List α → List β
map = Λ. λf : α → β. λxs : List α. xs nil (compose cons f)

concat : ∀α. List α → List α → List α
concat = Λ. λxs : List α. λys : List α. xs ys cons

concatMap : ∀α β. (α → List β) → List α → List β
concatMap = Λ. λf : α → List β. λxs : List α. xs nil (compose concat f)

filter : ∀α. (α → Bool) → List α → List α
filter = Λ. λp : α → Bool. λxs : List α. xs nil (λx : α. if p x then cons x else id)

. USAGE

head : ∀α. List α → α
head = Λ. λxs : List α. xs ??? const

tail : ∀α. List α → List α
tail = Λ. λxs : List α. matchList xs ??? (flip const)

tail2 : ∀α. List α → List α
tail2 = Λ. λxs : List α. matchList xs ??? (const id)

ana-ℤ : ℤ → List ℤ
ana-ℤ = λn : ℤ. iterate n nil cons

sum : List ℤ → ℤ
sum = λns : List ℤ. ns 0 +

list1-5 : List ℤ
list1-5 = ana-ℤ 5

head nil

tail nil

sum (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))

sum (map (* 2) list1-5)
