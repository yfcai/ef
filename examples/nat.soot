. PRELUDE

id : ∀ι. ι → ι
id = λx : ι. x

const : ∀α β. α → β → α
const = λx : α. λy : β. x


. NATURAL NUMBERS

type Nat = ∀ν. ν → (ν → ν) → ν

zero : Nat
zero = const

succ : Nat → Nat
succ = λn : Nat. λx : σ. λf : σ → σ. f (n x f)

. PATTERN MATCHING ON NATURAL NUMBERS

type MatchNat = ∀φ. φ → (Nat → φ) → φ

. first-order orderless F can type this!
matchNat : Nat → MatchNat
matchNat = λn : Nat.
  n const
    (λy : MatchNat. λx : ξ. λf : Nat → ξ. f (y zero succ))

. USAGE

to-ℤ : Nat → ℤ
to-ℤ = λn : Nat. n 0 (+ 1)

. type checker catches it when I forgot `const`
from-ℤ : ℤ → Nat
from-ℤ = λn : ℤ. iterate n zero (const succ)

. managed with a loop because recursion's less trivial to support
sum-to : ℤ → ℤ
sum-to = λn : ℤ. iterate n 0 +

to-ℤ (succ (succ (succ zero)))

pred : Nat → Nat
pred = λn : Nat. matchNat n ??? id

three : Nat
three = succ (succ (succ zero))

to-ℤ (pred (from-ℤ 3))

. reduction takes 1 second
sum-to 100
