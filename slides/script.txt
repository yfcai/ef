Topics must be SUPER COMPRESSED.
Approach: construct & compress

Entry: pluggable types esay (1 min)
Why are type systems hard to design?
- Hard to make software 100% bug-free
- Cost of perfection. Because perfection is mandatory. Every flaw is catastrophic.
What are pluggable types?
- has no effect on runtime semantics
- does not mandate type annotations in the syntax
What are its goals?
- types shan't restrict execution
- inference shan't restrict type system
What's the major obstacle? (Soundness)
- how do we integrate multiple type systems into a language?
- what does it mean to integrate multiple type systems?

Neck: Type soundness (choice: do we talk about syntactic approach or not? how well known is it?)
What's soundness?
- well-typed don't go wrong
What's the standard method of proving soundness?
- progress + preservation: small-step reduction semantics
What's its history?
- Wright & Felleisen
What's its predecessor?
- Denotational semantics
Tradeoffs under consideration, and advantage of semantic approach to type soundness
How to prove soundness by denotational semantics?
What _are_ types?

Main: Ideal model for recursive polymorphic types (2 min)
Nonempty closed sets (without going into details)
Complete metric space: well-definedness of recursive types
Extensive expressiveness
Completes pluggable types, completed by pluggable types

Examples (2 min)

Example: Optional type inference (too long; just show examples?)
# (rules; too long) Vaughan: A proof of correctness for the Hindley-Milner type inference algorithm

Example: Dependent types (read about case studies in Pierce book)
- vector types by supremum
- dependent functions by intersection

Contracts (HALO)
- base contracts: preimage
- arrow contract: dependent function
- conjunction: intersection type
- admissible condition: closure property

Wrap up (2 min):
What will it solve; why are you confident
what does it solve (optional language features)

Appendix:
- Mutation (special domain equations)
- Some lemmas about ideals
- Interpretation of F-judgements
