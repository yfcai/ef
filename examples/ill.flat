. ill-typed with the signature
.   auto : ∀α. α → α
         auto : (∀ω. ω → ω) → (∀ω. ω → ω)
auto = λx : ∀α. α → α. x x

. well-typed, rather trivial, self-application
id : ∀ω. ω → ω
id3 :  ∀β. β → β
id3 = id id id

. Ω and Y are always ill-typed.
Y : ∀α. (α → α) → α
.Y = λf : α → α. (λx : _1_. f (x x)) (λy : _2_. f (y y))
Ω : ℤ
.Ω = (λx : _0_. x x) (λx : _1_. x x)
.Ω = (λx : (∀ω. ω → ω). x x) (λx : (∀ω. ω → ω). x x)

. swapping universal and existential quantifiers
. extract-all is well-typed
. extract-ex is ill-typed due to dependency requirement
. which means that the dependency requirement is very real,
. and it does reject programs that are otherwise well-typed.

type All-in-ex = (∀β. (∀α. α → α) → β → β) → ℤ
type Ex-in-all = ∀γ. (∀δ. (γ → γ) → δ → δ) → ℤ

all-in-ex : All-in-ex
ex-in-all : Ex-in-all

extract-all : Ex-in-all
extract-all = all-in-ex

extract-ex : All-in-ex
extract-ex = ex-in-all
