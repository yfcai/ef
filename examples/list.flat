. PRELUDE

auto : (∀ω. ω → ω) → (∀ω. ω → ω)
auto = λx : ∀ω. ω → ω. x x

flip : ∀α β γ. (α → β → γ) → (β → α → γ)
flip = λf : α → β → γ. λy : β. λx : α. f x y

id : ∀ι. ι → ι
id = λx : α. x

compose : ∀β γ. (β → γ) → ∀α. (α → β) → (α → γ)
compose = λg : β → γ. λf : α → β. λx : α. g (f x)


. CONJUNCTION

type Pair α β = ∀γ. (α → β → γ) → γ

pair : ∀α β. α → β → Pair α β
pair = λx : α. λy : β. λf : α → β → γ. f x y

proj₁ : ∀α β. Pair α β → α
proj₁ = λp : Pair α β. p const

proj₂ : ∀α β. Pair α β → β
proj₂ = λp : Pair α β. p (flip const)


. DISJUNCTION

type Either α β = ∀γ. (α → γ) → (β → γ) → γ

inj₁ : ∀α β. α → Either α β
inj₁ = λx : α. λf : α → γ. λg : β → γ. f x

inj₂ : ∀α β. β → Either α β
inj₂ = λy : β. λf : α → γ. λg : β → γ. g y

. a disjunction is its own elimination form


. LIST

type List α = ∀β. β → (α → β → β) → β

. List is desugared to (∀α. List α)
.nil : List
nil = const

cons = λx : α. λxs : List α. λz : β. λf : α → β → β. (f x (xs z f))

. BӦHM-BERADUCCI ENCODING FOR PATTERN MATCHING ON LISTS

type MatchList η = ∀ξ. ξ → (η → List η → ξ) → ξ

matchList : ∀α. List α → MatchList α
matchList = λxs : List α.
  xs const
     (λx : α. λys : MatchList α. λz : β. λf : α → List α → β.
       f x (ys nil cons))

map : ∀α β. (α → β) → List α → List β
map = λf : α → β. λxs : List α.
  xs nil (compose cons f)

concat : ∀α. List α → List α → List α
concat = λxs : List α. λys : List α. xs ys cons

concatMap : ∀α β. (α → List β) → List α → List β
concatMap = λf : α → List β. λxs : List α.
  xs nil (λx : α. concat (f x))

filter : ∀α. (α → Bool) → List α → List α
filter = λp : α → Bool. λxs : List α.
  xs nil (λx : α. if p x then cons x else id)

. USAGE

head : ∀α. List α → α
head = λxs : List α. xs ??? const

tail : ∀α. List α → List α
tail = λxs : List α. matchList xs ??? (flip const)

ana-ℤ : ℤ → List ℤ
ana-ℤ = λn : ℤ. iterate n nil cons

sum : List ℤ → ℤ
sum = λns : List ℤ. ns 0 +

.sum (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 nil)))))

list1-5 : List ℤ
list1-5 = ana-ℤ 5

.head nil

.tail nil

.map (* 2)

const = λx : α. λy : β. x

match2 : ℤ → MatchList ℤ → MatchList ℤ

nConst : (ℤ → MatchList ℤ → MatchList ℤ) -> MatchList ℤ

.okay
.rant
 (ns const match2 : MatchList ℤ)

.okay
.rant
 (ns const : (ℤ → MatchList ℤ → MatchList ℤ) -> MatchList ℤ)

.okay
.rant
 ((λx : Int. λys : MatchList Int. λz : β. λf : Int → List Int → β.
      f x (ys nil cons))
  : ℤ → MatchList ℤ → MatchList ℤ)

.okay
.rant
 nConst
  (λx : Int. λys : MatchList Int. λz : β. λf : Int → List Int → β.
    f x (ys nil cons)) : MatchList Int

.okay
.rant
 (ns const
  (λx : Int. λys : MatchList Int. λz : β. λf : Int → List Int → β.
      f x (ys nil cons))
  )

.bad
.rant
 (ns const
  (λx : Int. λys : MatchList Int. λz : β. λf : Int → List Int → β.
      f x (ys nil cons))
  : MatchList Int)

ns : \all alp. alp -> (Int -> alp -> alp) -> alp

const : \all bet gam. bet -> gam -> bet

nil : \all the kap. kap -> (the -> kap -> kap) -> kap

cons : \all mu. mu ->
                (\all xi.  xi  -> (mu -> xi  -> xi ) -> xi ) ->
                (\all rho. rho -> (mu -> rho -> rho) -> rho)

(ns const
  (\abs x  : Int.
   \abs ys : \all del.
               del ->
               (Int -> (\all eps. eps -> (Int -> eps -> eps) -> eps) -> del) ->
               del.
   \abs z  : zet.
   \abs w  : Int -> (\all eta. eta -> (Int -> eta -> eta) -> eta) -> zet.
     w x (ys nil cons)))
 
.rant (bad)
 :
 \all sig.
    sig ->
    (Int -> (\all tau. tau -> (Int -> tau -> tau) -> tau) -> sig) ->
    sig
