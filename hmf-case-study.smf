... tuples

data Pair

postulate pair : ∀α β. α → β → Pair α β

pair

postulate uncurry : ∀α β γ. (α → β → γ) → Pair α β → γ

uncurry

$ = λf : α → β. λx : α. f x

... booleans

data Bool

postulate true : Bool

true

postulate false : Bool

false

postulate if : ∀α. Bool → α → α → α

if

... lists

data List

postulate cons : ∀α. α → List α → List α

cons

postulate nil : ∀α. List α

nil

... It's impossible to write `tail` in terms of `foldr`.
Thus, we postulate `head` and `tail` and define `foldr`
in terms of them.

postulate head : ∀α. List α → α

head

postulate tail : ∀α. List α → List α

tail

postulate nil? : ∀α. List α → Bool

nil?

postulate fix : ∀α. (α → α) → α

fix

foldr =
  λf : α → β → β. λzero : β.
    fix (λfold : List α → β. λxs : List α.
          if (nil? xs) zero (f (head xs) (fold (tail xs))))

... standard functions

id = λx : α. x

apply = $

const = λx : α. λy : β. x

choose = if true

flip = λf : α → β → γ. λy : β. λx : α. f x y

revapp = flip apply

postulate undefined : ∀α. α

... integers

data ℤ

postulate + : ℤ → ℤ → ℤ

plus = +

postulate le : ℤ → ℤ → Bool

le

postulate ge : ℤ → ℤ → Bool

ge

inc = + 1

... polymorphic functions

ids = cons id (cons id (cons id (cons id nil)))

auto = λx : ∀α. α → α. x x

postulate xauto : ∀α. (∀β. β → β) → α → α

takeAuto = λf : (∀α. α → α) → (∀α. α → α). f id

single = flip cons nil

compose = λf : β → γ. λg : α → β. λx : α. f (g x)

map = λf : α → β. foldr (compose cons f) nil

length = foldr (const (+ 1)) 0

... tuples

fst = uncurry const

snd = uncurry (flip const)

... ST monad

data ST

data Ref

postulate runST : ∀α. (∀s. ST s α) → α

runST

postulate newRef : ∀α s. α → ST s (Ref s α)

newRef

postulate returnST : ∀α s. α → ST s α

returnST

... standard Hindley-Milner tests (HM-only parts omitted)

.. WRONG
.. inc true

single id

choose const (flip const)

choose id

... impredicative application and higher-rank arguments

xauto

auto

λi : ∀α. α → α. i i

auto id

apply auto id

... no type ascription in System MF (omit single id)

runST (returnST 1)

. WRONG
. runST (newRef 1)

apply runST (returnST 1)

... `map xauto ids` et co. are ill-typed

map xauto

head ids

tail ids

apply tail ids

map head (single ids)

apply (map head) (single ids)

... instead of checking infinite poly types, showcase a curiosity

undefined undefined

... (In HMF's words) these fail horribly in ghc:
... (choose auto id) is rejected while ((choose auto) id) is accepted --
... so much for parenthesis :-)

choose auto id

(choose auto) id

choose id auto

choose auto

choose xauto

choose auto auto

choose xauto xauto

choose id xauto

choose xauto id

... (In HMF's words)
... these fail too in ghc: (choose ids []) is accepted while
... (choose [] ids) is rejected

choose nil ids

choose ids nil

... SMF can't check escaping skolems, because it confines no skolem

... unify different skolems
... co/contra variance

. these are unsatisfactory; see unsatisfactory-g etc.

... simulating existential types: SMF can't.

... test 'rigid' annotations
... (except SMF has no 'rigid' annotations; omit to revapp)

choose inc id

choose id inc

... test n-ary applications (or the lack of the need thereof)

revapp id auto

head ids 1

auto id 1

... omitted: rigid keyword, type propagation (testsProp)

... test type propagation through applications (omit duplicates)

returnST 1

... test type propagation to arguments
... SMF hasn't it yet, and probably won't for the first paper

... previously unsatisfactory functions, hence improved

unsatisfactory-const = const

unsatisfactory-head = foldr unsatisfactory-const undefined

unsatisfactory-fst = uncurry unsatisfactory-const

unsatisfactory-choose = choose unsatisfactory-const (flip unsatisfactory-const)


unsatisfactory-g = λx : (∀α. α → α) → ℤ. x id

unsatisfactory-f = λx : ℤ → ℤ. x 1

unsatisfactory-gf = unsatisfactory-g unsatisfactory-f


... untypeable things to make typeable
... by moving quantifiers out of functors perhaps?

. typeable in HMF
. map xauto ids

. untypeable in HMF
. map xauto (map xauto ids)

. but these are typeable:

data Contra

postulate contra : ∀α. (α → ℤ) → Contra α

postulate decontra : ∀α. Contra α → (α → ℤ)

contraId = contra (λx : ∀α. α → α. x 5)



mapContra = λf : β → α. λc : Contra α.
  contra (compose (decontra c) f)

. this suffers from quantifier-inside-functor problem
. mapContra auto contraId

... pressing questions

postulate bad-f0 : ∀α. ((α → α) → ℤ) → α

postulate bad-f1 : ((∀α. α → α) → ℤ) → (∀β. β)

postulate bad-x : (∀β. β → β) → ℤ

what-is-this-thing = bad-f0 bad-x

.. this thing should elaborate to:
.
. Λα. bad-f0 [α] (λx : α → α. bad-x (Λα. x))  :  ∀α. α

should-be-well-typed0 = bad-f1 bad-x

..
In ∀β. β₁ → β₂, the parity of β₁ is odd while the parity
of β₂ is even.

... but this should remain well-typed. In other words,
different universal names should be able to instantiate
the same existential names, as well as

postulate good-f : ∀α β. ((α → β) → ℤ) → ℤ

postulate good-x : (∀γ. γ → γ) → ℤ

should-remain-well-typed1 = good-f good-x
