id = λx : α. x

double = λf : α → α. λx : α. f (f x)

data ℤ

postulate + : ℤ → ℤ → ℤ

seven = double (+ 2) 3

selfApp = λx : ∀α. α → α. x x

quadruple = double double

data List

postulate nil : ∀α. List α

postulate cons : ∀α. α → List α → List α

type Bool = ∀α. α → α → α

postulate isnil : ∀α. List α → Bool

postulate head : ∀α. List α → α

postulate tail : ∀α. List α → List α

postulate fix : ∀α. (α → α) → α

map = λf : α → β.
        fix (λmap-f : List α → List β. λl : List α.
               (isnil l)
                 nil
                 (cons (f (head l)) (map-f (tail l))))

pierce = map (quadruple (+ 1))
             (cons 1 (cons 2 (cons 3 (cons 4 nil))))


choose = λx : α. λy : α. x

choose1 = choose id

choose2 = choose id id

f = cons

ids = cons id nil

fph = f id ids


weird2 = cons (+ 1) ids

weird3 = cons (map id) ids

weird4 = cons selfApp ids

fph2 = f id weird4


data Contra

postulate contra : ∀α. (α → ℤ) → Contra α

weird5 = contra id

postulate bot-to-int : (∀α. α) → ℤ

weird6 = contra bot-to-int
