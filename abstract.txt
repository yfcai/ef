Decidable impredicative polymorphism in Church style

System F enjoys the expressive power of first-class polymorphism
at the cost of prohibitive notational overhead. The notational
overhead has kept System F in the place of intermediate languages
of compilers and from becoming a practical language for human
programmers.

It is a long-standing problem how to reduce type annotations in
System F. There is hitherto no completely satisfying solution.
Type inference and many forms of partial type reconstruction are
undecidable for System F. It led people to question the
feasibility of polymorphism expressed in terms of forall
quantifiers in general.

Our work shows that impredicative polymorphism does not imply an
unacceptable amount of type annotation. We demonstrate a subset
of System F closed under eta expansion, such that it is decidable
to reconstruct all type abstractions and all type applications.
The programmer need only annotate the argument types of
functions, as required in most object-oriented languages with
static types.

The key idea is the reversal of prenex normalization of types.
The traditional approach is to convert any quantified type to
prenex normal form, where all quantifiers occur at the leftmost
outermost position and scope over the entire body of the type.
Prenex normal form is detrimental to type inference, because
quantified type variables may not occur in the argument type of a
function. Those variables complicate the type instantiation
gymnastics at call site without gaining any information in
return.

Instead of prenex normal form, we require quantifiers to be as
far to the right as possible without changing the meaning of the
type as a logical formula. In other words, the scope of a
quantifier should contain as few function arguments as possible.
Under this restriction, reconstructing type abstractions, type
applications and eta expansions reduces to the decidable problem
of first-order unification modulo alpha equivalence.
